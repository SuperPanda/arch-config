extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vec "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

# vim:ft=snippets:







# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};${4}
endsnippet


# std::deque
snippet deque
std::deque<${1:T}> ${2};${3}
endsnippet

# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};${3}
endsnippet

# std::list
snippet list
std::list<${1:T}> ${2};${3}
endsnippet

# std::set
snippet set
std::set<${1:T}> ${2};${3}
endsnippet

# std::map
snippet map
std::map<${1:Key}, ${2:T}> ${3};${4}
endsnippet

# std::multiset
snippet mset
std::multiset<${1:T}> ${2};${3}
endsnippet

# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet

# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};${3}
endsnippet

# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};${4}
endsnippet


# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};${3}
endsnippet

# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet


# std::stack
snippet stack
std::stack<${1:T}> ${2};${3}
endsnippet


# std::queue
snippet queue
std::queue<${1:T}> ${2};${3}
endsnippet

# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};${3}
endsnippet

